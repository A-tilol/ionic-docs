{
  "filePath": "./src/components/checkbox/checkbox.tsx",
  "encapsulation": "shadow",
  "tag": "ion-checkbox",
  "readme": "# ion-checkbox\n\nCheckboxes allow the selection of multiple options from a set of options. They appear as checked (ticked) when activated. Clicking on a checkbox will toggle the `checked` property. They can also be checked programmatically by setting the `checked` property.\n\n\n\n",
  "docs": "Checkboxes allow the selection of multiple options from a set of options. They appear as checked (ticked) when activated. Clicking on a checkbox will toggle the `checked` property. They can also be checked programmatically by setting the `checked` property.",
  "docsTags": [
    {
      "text": "{\"ios\" | \"md\"} mode - The mode determines which platform styles to use.",
      "name": "virtualProp"
    },
    {
      "text": "container - The container for the checkbox mark.",
      "name": "part"
    },
    {
      "text": "mark - The checkmark used to indicate the checked state.",
      "name": "part"
    }
  ],
  "usage": {
    "angular": "```html\n<!-- Default Checkbox -->\n<ion-checkbox></ion-checkbox>\n\n<!-- Disabled Checkbox -->\n<ion-checkbox disabled=\"true\"></ion-checkbox>\n\n<!-- Checked Checkbox -->\n<ion-checkbox checked=\"true\"></ion-checkbox>\n\n<!-- Checkbox Colors -->\n<ion-checkbox color=\"primary\"></ion-checkbox>\n<ion-checkbox color=\"secondary\"></ion-checkbox>\n<ion-checkbox color=\"danger\"></ion-checkbox>\n<ion-checkbox color=\"light\"></ion-checkbox>\n<ion-checkbox color=\"dark\"></ion-checkbox>\n\n<!-- Checkboxes in a List -->\n<ion-list>\n  <ion-item *ngFor=\"let entry of form\">\n    <ion-label>{{entry.val}}</ion-label>\n    <ion-checkbox slot=\"end\" [(ngModel)]=\"entry.isChecked\"></ion-checkbox>\n  </ion-item>\n</ion-list>\n```\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-page-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss']\n})\nexport class HomePage {\n  public form = [\n      { val: 'Pepperoni', isChecked: true },\n      { val: 'Sausage', isChecked: false },\n      { val: 'Mushroom', isChecked: false }\n    ];\n}\n```\n",
    "javascript": "```html\n<!-- Default Checkbox -->\n<ion-checkbox></ion-checkbox>\n\n<!-- Disabled Checkbox -->\n<ion-checkbox disabled></ion-checkbox>\n\n<!-- Checked Checkbox -->\n<ion-checkbox checked></ion-checkbox>\n\n<!-- Checkbox Colors -->\n<ion-checkbox color=\"primary\"></ion-checkbox>\n<ion-checkbox color=\"secondary\"></ion-checkbox>\n<ion-checkbox color=\"danger\"></ion-checkbox>\n<ion-checkbox color=\"light\"></ion-checkbox>\n<ion-checkbox color=\"dark\"></ion-checkbox>\n\n<!-- Checkboxes in a List -->\n<ion-list>\n  <ion-item>\n    <ion-label>Pepperoni</ion-label>\n    <ion-checkbox slot=\"end\" value=\"pepperoni\" checked></ion-checkbox>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Sausage</ion-label>\n    <ion-checkbox slot=\"end\" value=\"sausage\" disabled></ion-checkbox>\n  </ion-item>\n\n  <ion-item>\n    <ion-label>Mushrooms</ion-label>\n    <ion-checkbox slot=\"end\" value=\"mushrooms\"></ion-checkbox>\n  </ion-item>\n</ion-list>\n```\n",
    "react": "```tsx\nimport React, { useState } from 'react';\nimport { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonCheckbox, IonList, IonItem, IonLabel, IonItemDivider } from '@ionic/react';\n\nconst checkboxList = [\n  { val: 'Pepperoni', isChecked: true },\n  { val: 'Sausage', isChecked: false },\n  { val: 'Mushroom', isChecked: false }\n];\n\nexport const CheckboxExamples: React.FC = () => {\n\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>CheckboxExamples</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent>\n        <IonList>\n          <IonItemDivider>Default Checkbox</IonItemDivider>\n          <IonItem>\n            <IonLabel>Checked: {JSON.stringify(checked)}</IonLabel>\n            <IonCheckbox checked={checked} onIonChange={e => setChecked(e.detail.checked)} />\n          </IonItem>\n\n          <IonItemDivider>Disabled Checkbox</IonItemDivider>\n          <IonItem><IonCheckbox slot=\"end\" disabled={true} /></IonItem>\n\n          <IonItemDivider>Checkbox Colors</IonItemDivider>\n          <IonItem>\n            <IonCheckbox slot=\"end\" color=\"primary\" />\n            <IonCheckbox slot=\"end\" color=\"secondary\" />\n            <IonCheckbox slot=\"end\" color=\"danger\" />\n            <IonCheckbox slot=\"end\" color=\"light\" />\n            <IonCheckbox slot=\"end\" color=\"dark\" />\n          </IonItem>\n          <IonItemDivider>Checkboxes in a List</IonItemDivider>\n\n          {checkboxList.map(({ val, isChecked }, i) => (\n            <IonItem key={i}>\n              <IonLabel>{val}</IonLabel>\n              <IonCheckbox slot=\"end\" value={val} checked={isChecked} />\n            </IonItem>\n          ))}\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n};\n```",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'checkbox-example',\n  styleUrl: 'checkbox-example.css'\n})\nexport class CheckboxExample {\n  private form = [\n    { val: 'Pepperoni', isChecked: true },\n    { val: 'Sausage', isChecked: false },\n    { val: 'Mushroom', isChecked: false }\n  ];\n\n  render() {\n    return [\n      // Default Checkbox\n      <ion-checkbox></ion-checkbox>,\n\n      // Disabled Checkbox\n      <ion-checkbox disabled={true}></ion-checkbox>,\n\n      // Checked Checkbox\n      <ion-checkbox checked={true}></ion-checkbox>,\n\n      // Checkbox Colors\n      <ion-checkbox color=\"primary\"></ion-checkbox>,\n      <ion-checkbox color=\"secondary\"></ion-checkbox>,\n      <ion-checkbox color=\"danger\"></ion-checkbox>,\n      <ion-checkbox color=\"light\"></ion-checkbox>,\n      <ion-checkbox color=\"dark\"></ion-checkbox>,\n\n      // Checkboxes in a List\n      <ion-list>\n        {this.form.map(entry =>\n          <ion-item>\n            <ion-label>{entry.val}</ion-label>\n            <ion-checkbox slot=\"end\" checked={entry.isChecked}></ion-checkbox>\n          </ion-item>\n        )}\n      </ion-list>\n    ];\n  }\n}\n```\n",
    "vue": "```html\n<template>\n  <!-- Default Checkbox -->\n  <ion-checkbox></ion-checkbox>\n\n  <!-- Disabled Checkbox -->\n  <ion-checkbox disabled=\"true\"></ion-checkbox>\n\n  <!-- Checked Checkbox -->\n  <ion-checkbox checked=\"true\"></ion-checkbox>\n\n  <!-- Checkbox Colors -->\n  <ion-checkbox color=\"primary\"></ion-checkbox>\n  <ion-checkbox color=\"secondary\"></ion-checkbox>\n  <ion-checkbox color=\"danger\"></ion-checkbox>\n  <ion-checkbox color=\"light\"></ion-checkbox>\n  <ion-checkbox color=\"dark\"></ion-checkbox>\n\n  <!-- Checkboxes in a List -->\n  <ion-list>\n    <ion-item v-for=\"entry in form\">\n      <ion-label>{{entry.val}}</ion-label>\n      <ion-checkbox\n        slot=\"end\"\n        @update:modelValue=\"entry.isChecked = $event\"\n        :modelValue=\"entry.isChecked\">\n      </ion-checkbox>\n    </ion-item>\n  </ion-list>\n</template>\n\n<script>\nimport { IonCheckbox, IonItem, IonLabel, IonList } from '@ionic/vue';\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  components: { IonCheckbox, IonItem, IonLabel, IonList },\n  setup() {\n    const form = [\n      { val: 'Pepperoni', isChecked: true },\n      { val: 'Sausage', isChecked: false },\n      { val: 'Mushroom', isChecked: false }\n    ];\n    \n    return { form };\n  }\n});\n</script>\n```"
  },
  "props": [
    {
      "name": "checked",
      "type": "boolean",
      "mutable": true,
      "attr": "checked",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox is selected.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "color",
      "type": "string | undefined",
      "mutable": false,
      "attr": "color",
      "reflectToAttr": false,
      "docs": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
      "docsTags": [],
      "values": [
        {
          "type": "string"
        },
        {
          "type": "undefined"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the user cannot interact with the checkbox.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "indeterminate",
      "type": "boolean",
      "mutable": true,
      "attr": "indeterminate",
      "reflectToAttr": false,
      "docs": "If `true`, the checkbox will visually appear as indeterminate.",
      "docsTags": [],
      "default": "false",
      "values": [
        {
          "type": "boolean"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "values": [
        {
          "value": "ios",
          "type": "string"
        },
        {
          "value": "md",
          "type": "string"
        }
      ],
      "optional": true,
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "mutable": false,
      "attr": "name",
      "reflectToAttr": false,
      "docs": "The name of the control, which is submitted with the form data.",
      "docsTags": [],
      "default": "this.inputId",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    },
    {
      "name": "value",
      "type": "string",
      "mutable": false,
      "attr": "value",
      "reflectToAttr": false,
      "docs": "The value of the checkbox does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the checkbox participates in a native `<form>`.",
      "docsTags": [],
      "default": "'on'",
      "values": [
        {
          "type": "string"
        }
      ],
      "optional": false,
      "required": false
    }
  ],
  "methods": [],
  "events": [
    {
      "event": "ionBlur",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checkbox loses focus.",
      "docsTags": []
    },
    {
      "event": "ionChange",
      "detail": "CheckboxChangeEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checked property has changed.",
      "docsTags": []
    },
    {
      "event": "ionFocus",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the checkbox has focus.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the checkbox icon"
    },
    {
      "name": "--background-checked",
      "annotation": "prop",
      "docs": "Background of the checkbox icon when checked"
    },
    {
      "name": "--border-color",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon"
    },
    {
      "name": "--border-color-checked",
      "annotation": "prop",
      "docs": "Border color of the checkbox icon when checked"
    },
    {
      "name": "--border-radius",
      "annotation": "prop",
      "docs": "Border radius of the checkbox icon"
    },
    {
      "name": "--border-style",
      "annotation": "prop",
      "docs": "Border style of the checkbox icon"
    },
    {
      "name": "--border-width",
      "annotation": "prop",
      "docs": "Border width of the checkbox icon"
    },
    {
      "name": "--checkmark-color",
      "annotation": "prop",
      "docs": "Color of the checkbox checkmark when checked"
    },
    {
      "name": "--checkmark-width",
      "annotation": "prop",
      "docs": "Stroke width of the checkbox checkmark"
    },
    {
      "name": "--size",
      "annotation": "prop",
      "docs": "Size of the checkbox icon"
    },
    {
      "name": "--transition",
      "annotation": "prop",
      "docs": "Transition of the checkbox icon"
    }
  ],
  "slots": [],
  "parts": [
    {
      "name": "container",
      "docs": "The container for the checkbox mark."
    },
    {
      "name": "mark",
      "docs": "The checkmark used to indicate the checked state."
    }
  ],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}