{
  "filePath": "./src/components/tabs/tabs.tsx",
  "encapsulation": "shadow",
  "tag": "ion-tabs",
  "readme": "# ion-tabs\n\nTabs are a top level navigation component to implement a tab-based navigation.\nThe component is a container of individual [Tab](../tab/) components.\n\nThe `ion-tabs` component does not have any styling and works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an `ion-tab-bar` should be provided as a direct child of `ion-tabs`.\n\nBoth `ion-tabs` and `ion-tab-bar` can be used as standalone elements. They don’t depend on each other to work, but they are usually used together in order to implement a tab-based navigation that behaves like a native app.\n\nThe `ion-tab-bar` needs a slot defined in order to be projected to the right place in an `ion-tabs` component.\n\n",
  "docs": "Tabs are a top level navigation component to implement a tab-based navigation.\nThe component is a container of individual [Tab](../tab/) components.\n\nThe `ion-tabs` component does not have any styling and works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an `ion-tab-bar` should be provided as a direct child of `ion-tabs`.\n\nBoth `ion-tabs` and `ion-tab-bar` can be used as standalone elements. They don’t depend on each other to work, but they are usually used together in order to implement a tab-based navigation that behaves like a native app.\n\nThe `ion-tab-bar` needs a slot defined in order to be projected to the right place in an `ion-tabs` component.",
  "docsTags": [
    {
      "text": "- Content is placed between the named slots if provided without a slot.",
      "name": "slot"
    },
    {
      "text": "top - Content is placed at the top of the screen.",
      "name": "slot"
    },
    {
      "text": "bottom - Content is placed at the bottom of the screen.",
      "name": "slot"
    }
  ],
  "usage": {
    "angular": "```html\n<ion-tabs>\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"schedule\">\n      <ion-icon name=\"calendar\"></ion-icon>\n      <ion-label>Schedule</ion-label>\n      <ion-badge>6</ion-badge>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"speakers\">\n      <ion-icon name=\"person-circle\"></ion-icon>\n      <ion-label>Speakers</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"map\">\n      <ion-icon name=\"map\"></ion-icon>\n      <ion-label>Map</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"about\">\n      <ion-icon name=\"information-circle\"></ion-icon>\n      <ion-label>About</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>\n```\n\n\n### Router integration\n\nWhen used with Angular's router the `tab` property of the `ion-tab-button` should be a reference to the route path.\n\n```html\n<ion-tabs>\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"schedule\">\n      <ion-icon name=\"calendar\"></ion-icon>\n      <ion-label>Schedule</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n</ion-tabs>\n```\n\n```typescript\nimport { Routes } from '@angular/router';\nimport { TabsPage } from './tabs-page';\n\nconst routes: Routes = [\n  {\n    path: 'tabs',\n    component: TabsPage,\n    children: [\n      {\n        path: 'schedule',\n        children: [\n          {\n            path: '',\n            loadChildren: '../schedule/schedule.module#ScheduleModule'\n          }\n        ]\n      },\n      {\n        path: '',\n        redirectTo: '/app/tabs/schedule',\n        pathMatch: 'full'\n      }\n    ]\n  }\n];\n```\n",
    "javascript": "```html\n<ion-tabs>\n\n  <ion-tab tab=\"tab-schedule\">\n    <ion-nav></ion-nav>\n  </ion-tab>\n\n  <ion-tab tab=\"tab-speaker\">\n    <ion-nav></ion-nav>\n  </ion-tab>\n\n  <ion-tab tab=\"tab-map\" component=\"page-map\">\n    <ion-nav></ion-nav>\n  </ion-tab>\n\n  <ion-tab tab=\"tab-about\" component=\"page-about\">\n    <ion-nav></ion-nav>\n  </ion-tab>\n\n  <ion-tab-bar slot=\"bottom\">\n    <ion-tab-button tab=\"tab-schedule\">\n      <ion-icon name=\"calendar\"></ion-icon>\n      <ion-label>Schedule</ion-label>\n      <ion-badge>6</ion-badge>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"tab-speaker\">\n      <ion-icon name=\"person-circle\"></ion-icon>\n      <ion-label>Speakers</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"tab-map\">\n      <ion-icon name=\"map\"></ion-icon>\n      <ion-label>Map</ion-label>\n    </ion-tab-button>\n\n    <ion-tab-button tab=\"tab-about\">\n      <ion-icon name=\"information-circle\"></ion-icon>\n      <ion-label>About</ion-label>\n    </ion-tab-button>\n  </ion-tab-bar>\n\n</ion-tabs>\n```\n\n\n### Activating Tabs\n\nEach `ion-tab-button` will activate one of the tabs when pressed. In order to link the `ion-tab-button` to the `ion-tab` container, a matching `tab` property should be set on each component.\n\n```html\n<ion-tab tab=\"settings\">\n  ...\n</ion-tab>\n\n<ion-tab-button tab=\"settings\">\n  ...\n</ion-tab-button>\n```\n\nThe `ion-tab-button` and `ion-tab` above are linked by the common `tab` property.\n\nThe `tab` property identifies each tab, and it has to be unique within the `ion-tabs`. It's important to always set the `tab` property on the `ion-tab` and `ion-tab-button`, even if one component is not used.\n\n\n### Router integration\n\nWhen used with Ionic's router (`ion-router`) the `tab` property of the `ion-tab` matches the `component` property of an `ion-route`.\n\nThe following route within the scope of an `ion-tabs` outlet:\n\n```html\n<ion-route url=\"/settings-page\" component=\"settings\"></ion-route>\n```\n\nwill match the following tab:\n\n```html\n<ion-tab tab=\"settings\" component=\"settings-component\"></ion-tab>\n```",
    "react": "```tsx\nimport React from 'react';\nimport { IonTabs, IonTabBar, IonTabButton, IonIcon, IonLabel, IonBadge } from '@ionic/react';\nimport { calendar, personCircle, map, informationCircle } from 'ionicons/icons';\n\n\nexport const TabsExample: React.FC = () => (\n  <IonTabs>\n    <IonTabBar slot=\"bottom\">\n      <IonTabButton tab=\"schedule\">\n        <IonIcon icon={calendar} />\n        <IonLabel>Schedule</IonLabel>\n        <IonBadge>6</IonBadge>\n      </IonTabButton>\n\n      <IonTabButton tab=\"speakers\">\n        <IonIcon icon={personCircle} />\n        <IonLabel>Speakers</IonLabel>\n      </IonTabButton>\n\n      <IonTabButton tab=\"map\">\n        <IonIcon icon={map} />\n        <IonLabel>Map</IonLabel>\n      </IonTabButton>\n\n      <IonTabButton tab=\"about\">\n        <IonIcon icon={informationCircle} />\n        <IonLabel>About</IonLabel>\n      </IonTabButton>\n    </IonTabBar>\n  </IonTabs>\n);\n```\n",
    "stencil": "```tsx\nimport { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'tabs-example',\n  styleUrl: 'tabs-example.css'\n})\nexport class TabsExample {\n  render() {\n    return [\n     <ion-tabs>\n      <ion-tab tab=\"tab-schedule\">\n        <ion-nav></ion-nav>\n      </ion-tab>\n\n      <ion-tab tab=\"tab-speaker\">\n        <ion-nav></ion-nav>\n      </ion-tab>\n\n      <ion-tab tab=\"tab-map\" component=\"page-map\">\n        <ion-nav></ion-nav>\n      </ion-tab>\n\n      <ion-tab tab=\"tab-about\" component=\"page-about\">\n        <ion-nav></ion-nav>\n      </ion-tab>\n\n      <ion-tab-bar slot=\"bottom\">\n        <ion-tab-button tab=\"tab-schedule\">\n          <ion-icon name=\"calendar\"></ion-icon>\n          <ion-label>Schedule</ion-label>\n          <ion-badge>6</ion-badge>\n        </ion-tab-button>\n\n        <ion-tab-button tab=\"tab-speaker\">\n          <ion-icon name=\"person-circle\"></ion-icon>\n          <ion-label>Speakers</ion-label>\n        </ion-tab-button>\n\n        <ion-tab-button tab=\"tab-map\">\n          <ion-icon name=\"map\"></ion-icon>\n          <ion-label>Map</ion-label>\n        </ion-tab-button>\n\n        <ion-tab-button tab=\"tab-about\">\n          <ion-icon name=\"information-circle\"></ion-icon>\n          <ion-label>About</ion-label>\n        </ion-tab-button>\n      </ion-tab-bar>\n\n    </ion-tabs>\n    ];\n  }\n}\n```\n\n\n### Activating Tabs\n\nEach `ion-tab-button` will activate one of the tabs when pressed. In order to link the `ion-tab-button` to the `ion-tab` container, a matching `tab` property should be set on each component.\n\n```jsx\n<ion-tab tab=\"settings\">\n  ...\n</ion-tab>\n\n<ion-tab-button tab=\"settings\">\n  ...\n</ion-tab-button>\n```\n\nThe `ion-tab-button` and `ion-tab` above are linked by the common `tab` property.\n\nThe `tab` property identifies each tab, and it has to be unique within the `ion-tabs`. It's important to always set the `tab` property on the `ion-tab` and `ion-tab-button`, even if one component is not used.\n\n\n### Router integration\n\nWhen used with Ionic's router (`ion-router`) the `tab` property of the `ion-tab` matches the `component` property of an `ion-route`.\n\nThe following route within the scope of an `ion-tabs` outlet:\n\n```tsx\n<ion-route url=\"/settings-page\" component=\"settings\"></ion-route>\n```\n\nwill match the following tab:\n\n```tsx\n<ion-tab tab=\"settings\" component=\"settings-component\"></ion-tab>\n```",
    "vue": "**Tabs.vue**\n```html\n<template>\n  <ion-page>\n    <ion-tabs @ionTabsWillChange=\"beforeTabChange\" @ionTabsDidChange=\"afterTabChange\">\n      <ion-tab-bar slot=\"bottom\">\n        <ion-tab-button tab=\"schedule\" href=\"/tabs/schedule\">\n          <ion-icon :icon=\"calendar\"></ion-icon>\n          <ion-label>Schedule</ion-label>\n          <ion-badge>6</ion-badge>\n        </ion-tab-button>\n  \n        <ion-tab-button tab=\"speakers\" href=\"/tabs/speakers\">\n          <ion-icon :icon=\"personCircle\"></ion-icon>\n          <ion-label>Speakers</ion-label>\n        </ion-tab-button>\n      </ion-tab-bar>\n    </ion-tabs>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport { \n  IonIcon, \n  IonLabel, \n  IonPage,\n  IonTabBar, \n  IonTabButton, \n  IonTabs\n} from '@ionic/vue';\nimport { calendar, personCircle } from 'ionicons/icons';\n\nexport default defineComponent({\n  components: { IonIcon, IonLabel, IonPage, IonTabBar, IonTabButton, IonTabs },\n  setup() {\n    const beforeTabChange = () => {\n      // do something before tab change\n    }\n    const afterTabChange = () => {\n      // do something after tab change\n    }\n    return {\n      calendar,\n      personCircle,\n      beforeTabChange,\n      afterTabChange\n    }\n  }\n});\n</script>\n```\n\n**Schedule.vue**\n```html\n<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Schedule</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    \n    <ion-content class=\"ion-padding\">Schedule Tab</ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar\n} from '@ionic/vue';\n\nexport default defineComponent({\n  components: { IonContent, IonHeader, IonPage, IonTitle, IonToolbar }\n});\n</script>\n```\n\n**Speakers.vue**\n```html\n<template>\n  <ion-page>\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Speakers</ion-title>\n      </ion-toolbar>\n    </ion-header>\n    \n    <ion-content class=\"ion-padding\">Speakers Tab</ion-content>\n  </ion-page>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport {\n  IonContent,\n  IonHeader,\n  IonPage,\n  IonTitle,\n  IonToolbar\n} from '@ionic/vue';\n\nexport default defineComponent({\n  components: { IonContent, IonHeader, IonPage, IonTitle, IonToolbar }\n});\n</script>\n```"
  },
  "props": [],
  "methods": [
    {
      "name": "getSelected",
      "returns": {
        "type": "Promise<string | undefined>",
        "docs": ""
      },
      "signature": "getSelected() => Promise<string | undefined>",
      "parameters": [],
      "docs": "Get the currently selected tab.",
      "docsTags": []
    },
    {
      "name": "getTab",
      "returns": {
        "type": "Promise<HTMLIonTabElement | undefined>",
        "docs": ""
      },
      "signature": "getTab(tab: string | HTMLIonTabElement) => Promise<HTMLIonTabElement | undefined>",
      "parameters": [],
      "docs": "Get a specific tab by the value of its `tab` property or an element reference.",
      "docsTags": [
        {
          "name": "param",
          "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
        }
      ]
    },
    {
      "name": "select",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "select(tab: string | HTMLIonTabElement) => Promise<boolean>",
      "parameters": [],
      "docs": "Select a tab by the value of its `tab` property or an element reference.",
      "docsTags": [
        {
          "name": "param",
          "text": "tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property."
        }
      ]
    }
  ],
  "events": [
    {
      "event": "ionTabsDidChange",
      "detail": "{ tab: string; }",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the navigation has finished transitioning to a new component.",
      "docsTags": []
    },
    {
      "event": "ionTabsWillChange",
      "detail": "{ tab: string; }",
      "bubbles": false,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted when the navigation is about to transition to a new component.",
      "docsTags": []
    }
  ],
  "listeners": [],
  "styles": [],
  "slots": [
    {
      "name": "",
      "docs": "Content is placed between the named slots if provided without a slot."
    },
    {
      "name": "bottom",
      "docs": "Content is placed at the bottom of the screen."
    },
    {
      "name": "top",
      "docs": "Content is placed at the top of the screen."
    }
  ],
  "parts": [],
  "dependents": [],
  "dependencies": [],
  "dependencyGraph": {}
}